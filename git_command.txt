git 配置:
# 生成config文件
git config --global user.name "xx"
git config --global user.email "xx"
# 生成秘钥
ssh-keygen -t rsa -C "xx@xx.com"
# 查看秘钥
cat ~/.ssh/id_rsa.pub
# 验证配置成功
ssh -T git@github.com

git 常用命令:
git init  # git 初始化，创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件
git clone URL # 克隆现有的仓库
git status  # 检查当前文件状态
git add xx  # 跟踪新文件，xx添加到暂存区
git add .   # 跟踪新文件，当前目录全部添加到暂存区
git commit xx -m "" # 文件必须先add到暂存区，暂存区里的指定文件改动给提交到本地库
git commit -m ""    # 暂存区里的所有文件改动给提交到本地库
git commit -am ""   # -a参数可以将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库，即使它们没有经过git add添加到暂存区
git commit --amend  # 修改最近一次提交的内容，会生成一个新的commit节点
git branch    # 查看本地分支
git branch -r # 查看远端的分支
git remote # 查看远端的服务器
git checkout xx     # 切换分支到xx
git checkout -b xx  # 创建新的分支，并切换到新分支，原分支都会继承到新的分支
git checkout xx     # 工作区未提交文件的还原，返回到最近节点的内容
git reflog  # 查看git历史命令
git log # 查看提交的log
git log -x  # 查看最近的几次log
git log --name-status # 查看提交的log的具体信息
git push origin master  # 推送到远端服务器origin的master分支
git remove xx # 删除文件
git mv xx xx  # 改名和移动文件
git merge xx xxx # 将原分支xx合并到新的分支xxx
git fetch origin xx # 将远端服务器origin的xx分支拉到本地
git pull origin xx  # 将远端服务器origin的xx分支合并到本地（一般是操作同名的分支）
git cherry-pick commitID  # 将另一个分支的特定节点，拉倒当前的分支，并创造一个新的commitID节点
git reset --hard commitID # 返回到前面的某一节点，工作区的内容也恢复到了当前的节点，之前的修改无法恢复
